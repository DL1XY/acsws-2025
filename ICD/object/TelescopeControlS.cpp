// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v3.1.3
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_codegen.cpp:631

#ifndef _TAO_IDL__TMP__TELESCOPECONTROLS_CPP_
#define _TAO_IDL__TMP__TELESCOPECONTROLS_CPP_


#include "TelescopeControlS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"
#include "cstring"
// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_interface.cpp:1853

class TAO_TELESCOPE_MODULE_TelescopeControl_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len) override;

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len) override;
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_TELESCOPE_MODULE_TelescopeControl_Perfect_Hash_OpTable -N lookup */

unsigned int
TAO_TELESCOPE_MODULE_TelescopeControl_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static constexpr unsigned char asso_values[] =
    {
     32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, 32, 32, 32, 32,  0, 32, 20, 32,  0,
      0,  0,  5,  5,  0, 32, 32,  0, 32, 32,
     32,  0,  0, 32, 20,  0, 10, 32, 32, 32,
     20, 32,  0, 32, 32, 32, 32, 32,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_TELESCOPE_MODULE_TelescopeControl_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 23,
      MIN_WORD_LENGTH = 4,
      MAX_WORD_LENGTH = 26,
      MIN_HASH_VALUE = 4,
      MAX_HASH_VALUE = 31,
      HASH_VALUE_RANGE = 28,
      DUPLICATES = 2,
      WORDLIST_SIZE = 27
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"park", std::addressof(POA_TELESCOPE_MODULE::TelescopeControl::park_skel), nullptr},
      {"setTo", std::addressof(POA_TELESCOPE_MODULE::TelescopeControl::setTo_skel), nullptr},
      {"zenith", std::addressof(POA_TELESCOPE_MODULE::TelescopeControl::zenith_skel), nullptr},
      {"_get_name", std::addressof(POA_ACS::ACSComponent::_get_name_skel), 0},
      {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
      {"_get_status", std::addressof(POA_TELESCOPE_MODULE::TelescopeControl::_get_status_skel), 0},
      {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr},
      {"setUncalibrated", std::addressof(POA_TELESCOPE_MODULE::TelescopeControl::setUncalibrated_skel), nullptr},
      {"offSet", std::addressof(POA_TELESCOPE_MODULE::TelescopeControl::offSet_skel), nullptr},
      {"calibrateEncoders", std::addressof(POA_TELESCOPE_MODULE::TelescopeControl::calibrateEncoders_skel), nullptr},
      {"_get_actualAzimuth", std::addressof(POA_TELESCOPE_MODULE::TelescopeControl::_get_actualAzimuth_skel), 0},
      {"_get_componentState", std::addressof(POA_ACS::ACSComponent::_get_componentState_skel), 0},
      {"_get_actualAltitude", std::addressof(POA_TELESCOPE_MODULE::TelescopeControl::_get_actualAltitude_skel), 0},
      {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
      {"_get_commandedAzimuth", std::addressof(POA_TELESCOPE_MODULE::TelescopeControl::_get_commandedAzimuth_skel), 0},
      {"_get_commandedAltitude", std::addressof(POA_TELESCOPE_MODULE::TelescopeControl::_get_commandedAltitude_skel), 0},
      {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
      {"find_characteristic", std::addressof(POA_ACS::CharacteristicModel::find_characteristic_skel), nullptr},
      {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
      {"objfix", std::addressof(POA_TELESCOPE_MODULE::TelescopeControl::objfix_skel), nullptr},
      {"get_all_characteristics", std::addressof(POA_ACS::CharacteristicModel::get_all_characteristics_skel), nullptr},
      {"descriptor", std::addressof(POA_ACS::CharacteristicComponent::descriptor_skel), nullptr},
      {"get_characteristic_by_name", std::addressof(POA_ACS::CharacteristicModel::get_characteristic_by_name_skel), nullptr},
    };

  static constexpr signed char lookup[] =
    {
       -1,  -1,  -1,  -1,   4,   5,   6,  -1,  -1,   7,   8,   9, -15,  -2, 
       10,  11,  12,  13,  14, -38,  17,  18,  19,  20,  21,  22,  23,  -1, 
       24,  -1,  25,  26, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int const key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_TELESCOPE_MODULE_TelescopeControl_Perfect_Hash_OpTable tao_TELESCOPE_MODULE_TelescopeControl_optable;


// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:89



POA_TELESCOPE_MODULE::TelescopeControl::TelescopeControl ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_TELESCOPE_MODULE_TelescopeControl_optable);
}

POA_TELESCOPE_MODULE::TelescopeControl::TelescopeControl (const TelescopeControl& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_ACS::ACSComponent (rhs),
    POA_ACS::CharacteristicModel (rhs),
    POA_ACS::CharacteristicComponent (rhs)
{
}


namespace POA_TELESCOPE_MODULE
{
  
  // TAO_IDL - Generated from
  // /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class setTo_TelescopeControl
    : public TAO::Upcall_Command
  {
  public:
    inline setTo_TelescopeControl (
      POA_TELESCOPE_MODULE::TelescopeControl * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Double>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Double> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Double>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Double> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->setTo (
        arg_1
        , arg_2);
    }
  
  private:
    POA_TELESCOPE_MODULE::TelescopeControl * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_TELESCOPE_MODULE::TelescopeControl::setTo_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Double>::in_arg_val _tao_altitude;
  TAO::SArg_Traits< ::CORBA::Double>::in_arg_val _tao_azimuth;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_altitude),
      std::addressof(_tao_azimuth)
    };
  
  POA_TELESCOPE_MODULE::TelescopeControl * const impl =
    dynamic_cast<POA_TELESCOPE_MODULE::TelescopeControl *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  setTo_TelescopeControl command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 3
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_TELESCOPE_MODULE
{
  
  // TAO_IDL - Generated from
  // /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class objfix_TelescopeControl
    : public TAO::Upcall_Command
  {
  public:
    inline objfix_TelescopeControl (
      POA_TELESCOPE_MODULE::TelescopeControl * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Double>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Double> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Double>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Double> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->objfix (
        arg_1
        , arg_2);
    }
  
  private:
    POA_TELESCOPE_MODULE::TelescopeControl * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_TELESCOPE_MODULE::TelescopeControl::objfix_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Double>::in_arg_val _tao_altitude;
  TAO::SArg_Traits< ::CORBA::Double>::in_arg_val _tao_azimuth;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_altitude),
      std::addressof(_tao_azimuth)
    };
  
  POA_TELESCOPE_MODULE::TelescopeControl * const impl =
    dynamic_cast<POA_TELESCOPE_MODULE::TelescopeControl *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  objfix_TelescopeControl command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 3
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_TELESCOPE_MODULE
{
  
  // TAO_IDL - Generated from
  // /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class offSet_TelescopeControl
    : public TAO::Upcall_Command
  {
  public:
    inline offSet_TelescopeControl (
      POA_TELESCOPE_MODULE::TelescopeControl * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Double>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Double> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Double>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Double> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->offSet (
        arg_1
        , arg_2);
    }
  
  private:
    POA_TELESCOPE_MODULE::TelescopeControl * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_TELESCOPE_MODULE::TelescopeControl::offSet_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Double>::in_arg_val _tao_altOffset;
  TAO::SArg_Traits< ::CORBA::Double>::in_arg_val _tao_azOffset;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_altOffset),
      std::addressof(_tao_azOffset)
    };
  
  POA_TELESCOPE_MODULE::TelescopeControl * const impl =
    dynamic_cast<POA_TELESCOPE_MODULE::TelescopeControl *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  offSet_TelescopeControl command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 3
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_TELESCOPE_MODULE
{
  
  // TAO_IDL - Generated from
  // /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class zenith_TelescopeControl
    : public TAO::Upcall_Command
  {
  public:
    inline zenith_TelescopeControl (
      POA_TELESCOPE_MODULE::TelescopeControl * servant)
      : servant_ (servant)
    {
    }

    void execute () override
    {
      this->servant_->zenith ();
    }
  
  private:
    POA_TELESCOPE_MODULE::TelescopeControl * const servant_;
  };
}
// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_TELESCOPE_MODULE::TelescopeControl::zenith_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_TELESCOPE_MODULE::TelescopeControl * const impl =
    dynamic_cast<POA_TELESCOPE_MODULE::TelescopeControl *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  zenith_TelescopeControl command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_TELESCOPE_MODULE
{
  
  // TAO_IDL - Generated from
  // /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class park_TelescopeControl
    : public TAO::Upcall_Command
  {
  public:
    inline park_TelescopeControl (
      POA_TELESCOPE_MODULE::TelescopeControl * servant)
      : servant_ (servant)
    {
    }

    void execute () override
    {
      this->servant_->park ();
    }
  
  private:
    POA_TELESCOPE_MODULE::TelescopeControl * const servant_;
  };
}
// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_TELESCOPE_MODULE::TelescopeControl::park_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_TELESCOPE_MODULE::TelescopeControl * const impl =
    dynamic_cast<POA_TELESCOPE_MODULE::TelescopeControl *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  park_TelescopeControl command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_TELESCOPE_MODULE
{
  
  // TAO_IDL - Generated from
  // /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class setUncalibrated_TelescopeControl
    : public TAO::Upcall_Command
  {
  public:
    inline setUncalibrated_TelescopeControl (
      POA_TELESCOPE_MODULE::TelescopeControl * servant)
      : servant_ (servant)
    {
    }

    void execute () override
    {
      this->servant_->setUncalibrated ();
    }
  
  private:
    POA_TELESCOPE_MODULE::TelescopeControl * const servant_;
  };
}
// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_TELESCOPE_MODULE::TelescopeControl::setUncalibrated_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_TELESCOPE_MODULE::TelescopeControl * const impl =
    dynamic_cast<POA_TELESCOPE_MODULE::TelescopeControl *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  setUncalibrated_TelescopeControl command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_TELESCOPE_MODULE
{
  
  // TAO_IDL - Generated from
  // /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class calibrateEncoders_TelescopeControl
    : public TAO::Upcall_Command
  {
  public:
    inline calibrateEncoders_TelescopeControl (
      POA_TELESCOPE_MODULE::TelescopeControl * servant)
      : servant_ (servant)
    {
    }

    void execute () override
    {
      this->servant_->calibrateEncoders ();
    }
  
  private:
    POA_TELESCOPE_MODULE::TelescopeControl * const servant_;
  };
}
// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_TELESCOPE_MODULE::TelescopeControl::calibrateEncoders_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_TELESCOPE_MODULE::TelescopeControl * const impl =
    dynamic_cast<POA_TELESCOPE_MODULE::TelescopeControl *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  calibrateEncoders_TelescopeControl command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_TELESCOPE_MODULE
{
  
  // TAO_IDL - Generated from
  // /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class _get_commandedAltitude_TelescopeControl
    : public TAO::Upcall_Command
  {
  public:
    inline _get_commandedAltitude_TelescopeControl (
      POA_TELESCOPE_MODULE::TelescopeControl * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::ACS::RWdouble>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACS::RWdouble> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->commandedAltitude ();
    }
  
  private:
    POA_TELESCOPE_MODULE::TelescopeControl * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_TELESCOPE_MODULE::TelescopeControl::_get_commandedAltitude_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::ACS::RWdouble>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_TELESCOPE_MODULE::TelescopeControl * const impl =
    dynamic_cast<POA_TELESCOPE_MODULE::TelescopeControl *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_commandedAltitude_TelescopeControl command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_TELESCOPE_MODULE
{
  
  // TAO_IDL - Generated from
  // /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class _get_commandedAzimuth_TelescopeControl
    : public TAO::Upcall_Command
  {
  public:
    inline _get_commandedAzimuth_TelescopeControl (
      POA_TELESCOPE_MODULE::TelescopeControl * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::ACS::RWdouble>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACS::RWdouble> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->commandedAzimuth ();
    }
  
  private:
    POA_TELESCOPE_MODULE::TelescopeControl * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_TELESCOPE_MODULE::TelescopeControl::_get_commandedAzimuth_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::ACS::RWdouble>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_TELESCOPE_MODULE::TelescopeControl * const impl =
    dynamic_cast<POA_TELESCOPE_MODULE::TelescopeControl *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_commandedAzimuth_TelescopeControl command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_TELESCOPE_MODULE
{
  
  // TAO_IDL - Generated from
  // /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class _get_actualAltitude_TelescopeControl
    : public TAO::Upcall_Command
  {
  public:
    inline _get_actualAltitude_TelescopeControl (
      POA_TELESCOPE_MODULE::TelescopeControl * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::ACS::ROdouble>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACS::ROdouble> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->actualAltitude ();
    }
  
  private:
    POA_TELESCOPE_MODULE::TelescopeControl * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_TELESCOPE_MODULE::TelescopeControl::_get_actualAltitude_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::ACS::ROdouble>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_TELESCOPE_MODULE::TelescopeControl * const impl =
    dynamic_cast<POA_TELESCOPE_MODULE::TelescopeControl *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_actualAltitude_TelescopeControl command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_TELESCOPE_MODULE
{
  
  // TAO_IDL - Generated from
  // /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class _get_actualAzimuth_TelescopeControl
    : public TAO::Upcall_Command
  {
  public:
    inline _get_actualAzimuth_TelescopeControl (
      POA_TELESCOPE_MODULE::TelescopeControl * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::ACS::ROdouble>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACS::ROdouble> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->actualAzimuth ();
    }
  
  private:
    POA_TELESCOPE_MODULE::TelescopeControl * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_TELESCOPE_MODULE::TelescopeControl::_get_actualAzimuth_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::ACS::ROdouble>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_TELESCOPE_MODULE::TelescopeControl * const impl =
    dynamic_cast<POA_TELESCOPE_MODULE::TelescopeControl *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_actualAzimuth_TelescopeControl command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_TELESCOPE_MODULE
{
  
  // TAO_IDL - Generated from
  // /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class _get_status_TelescopeControl
    : public TAO::Upcall_Command
  {
  public:
    inline _get_status_TelescopeControl (
      POA_TELESCOPE_MODULE::TelescopeControl * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::ACS::RWpattern>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACS::RWpattern> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->status ();
    }
  
  private:
    POA_TELESCOPE_MODULE::TelescopeControl * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_TELESCOPE_MODULE::TelescopeControl::_get_status_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::ACS::RWpattern>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_TELESCOPE_MODULE::TelescopeControl * const impl =
    dynamic_cast<POA_TELESCOPE_MODULE::TelescopeControl *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_status_TelescopeControl command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:155





::CORBA::Boolean POA_TELESCOPE_MODULE::TelescopeControl::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:alma/ACS/ACSComponent:1.0") == 0 ||
      std::strcmp (value, "IDL:alma/ACS/CharacteristicModel:1.0") == 0 ||
      std::strcmp (value, "IDL:alma/ACS/CharacteristicComponent:1.0") == 0 ||
      std::strcmp (value, "IDL:acsws/TELESCOPE_MODULE/TelescopeControl:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_TELESCOPE_MODULE::TelescopeControl::_interface_repository_id () const
{
  return "IDL:acsws/TELESCOPE_MODULE/TelescopeControl:1.0";
}


// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:394



void POA_TELESCOPE_MODULE::TelescopeControl::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:354



TELESCOPE_MODULE::TelescopeControl *
POA_TELESCOPE_MODULE::TelescopeControl::_this ()
{
  TAO_Stub_Auto_Ptr stub (this->_create_stub ());
  ::CORBA::Boolean const _tao_opt_colloc = stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  ::CORBA::Object_var obj = new (std::nothrow) ::CORBA::Object (stub.get (), _tao_opt_colloc, this);
  if (obj.ptr ())
    {
      (void) stub.release ();
      return TAO::Narrow_Utils<::TELESCOPE_MODULE::TelescopeControl>::unchecked_narrow (obj.in ());
    }
  return {};
}

#endif /* ifndef */

