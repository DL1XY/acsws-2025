// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v3.1.3
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL__TMP__STORAGEC_H_
#define _TAO_IDL__TMP__STORAGEC_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "acscomponentC.h"
#include "TypesC.h"

#if TAO_MAJOR_VERSION != 3 || TAO_MINOR_VERSION != 1 || TAO_MICRO_VERSION != 3
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace STORAGE_MODULE
{
  // TAO_IDL - Generated from
  // /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_STORAGE_MODULE_STORAGE__VAR_OUT_CH_)
#define _STORAGE_MODULE_STORAGE__VAR_OUT_CH_

  class Storage;
  using Storage_ptr = Storage*;
  using Storage_var = TAO_Objref_Var_T<Storage>;
  using Storage_out = TAO_Objref_Out_T<Storage>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class  Storage
    : public virtual ::ACS::ACSComponent
  
  {
  public:
    friend class TAO::Narrow_Utils<Storage>;
    // TAO_IDL - Generated from
    // /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = Storage_ptr;
    using _var_type = Storage_var;
    using _out_type = Storage_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Storage_ptr _duplicate (Storage_ptr obj);

    static void _tao_release (Storage_ptr obj);

    static Storage_ptr _narrow (::CORBA::Object_ptr obj);
    static Storage_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Storage_ptr _nil ();

    virtual ::CORBA::Long getNextValidId ();

    virtual void storeObservation (
      const ::TYPES::Proposal & prop,
      const ::TYPES::ImageList & images);

    virtual void clearAllData ();

    virtual ::TYPES::ImageList * getObservation (
      ::CORBA::Long pid);

    
    // TAO_IDL - Generated from
    // /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Storage ();

    // Concrete non-local interface only.
    Storage (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Storage (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~Storage () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    Storage (const Storage &) = delete;
    Storage (Storage &&) = delete;
    Storage &operator= (const Storage &) = delete;
    Storage &operator= (Storage &&) = delete;
  };
  // TAO_IDL - Generated from
  // /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern  ::CORBA::TypeCode_ptr const _tc_Storage;


// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module STORAGE_MODULE
// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_STORAGE_MODULE_STORAGE__ARG_TRAITS_)
#define _STORAGE_MODULE_STORAGE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::STORAGE_MODULE::Storage>
    : public Object_Arg_Traits_T<
        ::STORAGE_MODULE::Storage_ptr,
        ::STORAGE_MODULE::Storage_var,
        ::STORAGE_MODULE::Storage_out,
        TAO::Objref_Traits<STORAGE_MODULE::Storage>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_STORAGE_MODULE_STORAGE__TRAITS_)
#define _STORAGE_MODULE_STORAGE__TRAITS_

  template<>
  struct  Objref_Traits< ::STORAGE_MODULE::Storage>
  {
    static ::STORAGE_MODULE::Storage_ptr duplicate (::STORAGE_MODULE::Storage_ptr p);
    static void release (::STORAGE_MODULE::Storage_ptr p);
    static ::STORAGE_MODULE::Storage_ptr nil ();
    static ::CORBA::Boolean marshal (const ::STORAGE_MODULE::Storage_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, STORAGE_MODULE::Storage_ptr); // copying
 void operator<<= (::CORBA::Any &, STORAGE_MODULE::Storage_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, STORAGE_MODULE::Storage_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const STORAGE_MODULE::Storage_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, STORAGE_MODULE::Storage_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /alma/ACS-2025APR/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "StorageC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

